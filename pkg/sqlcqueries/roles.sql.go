// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: roles.sql

package sqlcqueries

import (
	"context"

	"github.com/google/uuid"
)

const createRole = `-- name: CreateRole :exec
INSERT INTO roles (name)
VALUES ($1)
`

type CreateRoleParams struct {
	Name string `json:"name"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) error {
	_, err := q.db.Exec(ctx, createRole, arg.Name)
	return err
}

const createUserRole = `-- name: CreateUserRole :exec
INSERT INTO user_roles (user_id, role_id)
VALUES ($1, $2)
`

type CreateUserRoleParams struct {
	UserID *uuid.UUID `json:"user_id"`
	RoleID *uuid.UUID `json:"role_id"`
}

func (q *Queries) CreateUserRole(ctx context.Context, arg CreateUserRoleParams) error {
	_, err := q.db.Exec(ctx, createUserRole, arg.UserID, arg.RoleID)
	return err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles
WHERE id = $1
`

type DeleteRoleParams struct {
	ID uuid.UUID `json:"id"`
}

func (q *Queries) DeleteRole(ctx context.Context, arg DeleteRoleParams) error {
	_, err := q.db.Exec(ctx, deleteRole, arg.ID)
	return err
}

const deleteUserRole = `-- name: DeleteUserRole :exec
DELETE FROM user_roles
WHERE id = $1
`

type DeleteUserRoleParams struct {
	ID uuid.UUID `json:"id"`
}

func (q *Queries) DeleteUserRole(ctx context.Context, arg DeleteUserRoleParams) error {
	_, err := q.db.Exec(ctx, deleteUserRole, arg.ID)
	return err
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT id, name
FROM roles
WHERE id = $1
`

type GetRoleByIDParams struct {
	ID uuid.UUID `json:"id"`
}

func (q *Queries) GetRoleByID(ctx context.Context, arg GetRoleByIDParams) (*Role, error) {
	row := q.db.QueryRow(ctx, getRoleByID, arg.ID)
	var i Role
	err := row.Scan(&i.ID, &i.Name)
	return &i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT id, name
FROM roles
WHERE name = $1
`

type GetRoleByNameParams struct {
	Name string `json:"name"`
}

func (q *Queries) GetRoleByName(ctx context.Context, arg GetRoleByNameParams) (*Role, error) {
	row := q.db.QueryRow(ctx, getRoleByName, arg.Name)
	var i Role
	err := row.Scan(&i.ID, &i.Name)
	return &i, err
}

const getRoles = `-- name: GetRoles :many
SELECT id, name
FROM roles
`

func (q *Queries) GetRoles(ctx context.Context) ([]*Role, error) {
	rows, err := q.db.Query(ctx, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserRoleByID = `-- name: GetUserRoleByID :one
SELECT id, user_id, role_id
FROM user_roles
WHERE id = $1
`

type GetUserRoleByIDParams struct {
	ID uuid.UUID `json:"id"`
}

func (q *Queries) GetUserRoleByID(ctx context.Context, arg GetUserRoleByIDParams) (*UserRole, error) {
	row := q.db.QueryRow(ctx, getUserRoleByID, arg.ID)
	var i UserRole
	err := row.Scan(&i.ID, &i.UserID, &i.RoleID)
	return &i, err
}

const getUserRoleByUserID = `-- name: GetUserRoleByUserID :one
SELECT 
    ur.id AS user_role_id,
    ur.user_id,
    ur.role_id,
    r.id AS role_id,
    r.name AS role_name
FROM user_roles ur
LEFT JOIN roles r ON ur.role_id = r.id
WHERE ur.user_id = $1
`

type GetUserRoleByUserIDParams struct {
	UserID *uuid.UUID `json:"user_id"`
}

type GetUserRoleByUserIDRow struct {
	UserRoleID uuid.UUID  `json:"user_role_id"`
	UserID     *uuid.UUID `json:"user_id"`
	RoleID     *uuid.UUID `json:"role_id"`
	RoleID_2   *uuid.UUID `json:"role_id_2"`
	RoleName   *string    `json:"role_name"`
}

func (q *Queries) GetUserRoleByUserID(ctx context.Context, arg GetUserRoleByUserIDParams) (*GetUserRoleByUserIDRow, error) {
	row := q.db.QueryRow(ctx, getUserRoleByUserID, arg.UserID)
	var i GetUserRoleByUserIDRow
	err := row.Scan(
		&i.UserRoleID,
		&i.UserID,
		&i.RoleID,
		&i.RoleID_2,
		&i.RoleName,
	)
	return &i, err
}

const updateRole = `-- name: UpdateRole :exec
UPDATE roles
SET name = $1
WHERE id = $2
`

type UpdateRoleParams struct {
	Name string    `json:"name"`
	ID   uuid.UUID `json:"id"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.Exec(ctx, updateRole, arg.Name, arg.ID)
	return err
}

const updateUserRole = `-- name: UpdateUserRole :exec
UPDATE user_roles
SET user_id = $1, role_id = $2
WHERE id = $3
`

type UpdateUserRoleParams struct {
	UserID *uuid.UUID `json:"user_id"`
	RoleID *uuid.UUID `json:"role_id"`
	ID     uuid.UUID  `json:"id"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) error {
	_, err := q.db.Exec(ctx, updateUserRole, arg.UserID, arg.RoleID, arg.ID)
	return err
}
